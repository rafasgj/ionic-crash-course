title: Introdução ao Desenvolvimento Móvel com Ionic
theme: apple_keynote_black
author: Rafael Guterres Jeffman
institute: Jornada Acadêmica PUC/FACIN
date: Julho de 2019
language: brazil

:coverpage

:items+image
# {\\Large Desenvolvimento para Dispositivos Móveis}
* Desenvolvimento Nativo
    * iOS
    * Android
* Desenvolvimento Híbrido
    * Ionic
    * Xamarin
    * PhoneGap
[images/cellphone.png]

:items+image
# Desenvolvimento Nativo
[images/three_phones.png]
* Acesso a toda a API do dispositivo móvel.
* Tira vantagem de todos os componentes do dispositivo.
* Requer uma base de código para cada plataforma.
* Limita a base de usuários.

:items+image
# Desenvolvimento Híbrido
* Uma única base de código.
* Não limita a base de usuários.
* Utiliza ferramentas conhecidas.
* Pode não disponibilizar todos os recursos dos dispositivos.
[images/hybrid.png]

:items+image
# Ionic
[images/ionic.png]
* Desenvolvimento híbrido baseado em HTML5.
* Utiliza Cordova ou Capacitor para criar a aplicação nativa.
* Open Source (MIT)
* \\url{https:\/\/ionicframework.com}

:items
# Instalação do Ionic
* Ionic utiliza diversas ferramentas, a maioria rodando sob Node.js.
* Utiliza o Apache Cordova para gerar a aplicação nativa.
* Utiliza os ambientes nativos para gerar as aplicações.
* Uso de dispositivos ou emuladores para testar as aplicações.
* {\\small\\url{https:\/\/ionicframework.com\/docs\/installation\/cli}}

:items
# Configuração do Ambiente de Desenvolvimento
* JAVA\_HOME
* ANDROID\_SDK\_ROOT
* E os diretórios |tools\/bin|, |tools| e |emulator| devem estar no |PATH|

:bigimage
[images/ionic-blank.png]

:items+image
# Ionic Framework
* /UI Toolkit/
* /Framework agnostic/
* Baseado em ferramentas conhecidas (HTML, CSS e JavaScript)
* Integra facilmente com Angular e React (Vue?)
* Multi-plataforma
* Baseado em padrões da Web
[images/ionic.png]

:items
# Principais conceitos
* Componentes UI
* Continuidade de Plataforma
    * Aplicações Ionic tem aparência nativa.
* Navegação não-linear
* Acesso a componentes nativos (com Cordova ou Capacitor)
* Temas

:items+image
# Ferramentas Básicas
[images/terminal.png]
* Git
* Node.js
* Editor de código (Visual Studio Code, Atom, ...)
* CLI Terminal

:items
# Criando um novo projeto.
* |ionic start --list|
* |ionic start PhotoGallery blank|
    * Perguntará qual framework utilizar (|--type|)
    * Criará uma estrutura de diretórios para o projeto.
    * Atualizará as dependências do Node.js.
* |cd PhotoGallery|

:items+image
# Estrutura do Projeto
* e2e - Testes automatizados: "unit" e "end-to-end"
* \*.json - Arquivos de configuração do projeto.
* .gitignore - configuração para adicionar o projeto ao Git.
* src - /onde a mágica acontece./
[images/project_top_level_hier.png]

:items+image
# Estrutura do Projeto - *src*
* index.html - *app-root*
* theme - tema da interface
* assets - imagens, audios, etc.
* app - a aplicação...
[images/project_src_hier.png]

:items+image
# Estrutura do Projeto - *src\/app*
* Arquivos da aplicação.
* Diretórios das páginas da aplicação.
* Diretórios de serviços.
* Diretórios dos outros componentes.
[images/project_app_hier.png]

:items+image
# Página da aplicação
* \*.html - template da página.
* \*.scss - Definições Sass para a página.
* page.page.ts - código TypeScript da página.
[images/project_page_hier.png]

:bigtitle
# TypeScript

:items
# Classes
* Declaração: *class* /NomeDaClasse/ \{...\}
* Campos: [*public*] /nomeDoCampo/ *:* /tipo/
* Tipos: *string*, *number*, *boolean*, *any*
* O uso de *this* para acessar um campo não é opcional!

:items
# Construtores
* *constructor (*/parametros/*)*
* Parâmetros de construtor viram *campos*, logo, podem ser /public/ ou /private/.
* Exemplo:
    * class Person \{
        * constructor(public name: string, public age: number)
    * \}

:items
# Métodos
* /nomeDoMetodo/ *(*/lista de parâmetros/*)* [*:* /tipo/] \{...\}
* Arrow Functions: *(/param: type/) => \{* /code/ *\}*

:items
# Arrays e Tuplas
* Array: /identificador/*: */type/*[]*
    * pares: number[] = [0, 2, 4, 6, 8]
* Tupla: /identificador/*: [* /type, type, .../ *]*
    * software: [string, number] = ["Ionic", 4]

:bigtitle
# O Contador de Cliques

:bigimage
[images/contador_ui.png]

:twoimages
[images/home_page_html.png]
[images/home_page_ts.png]

:bigtitle
# Lista de Contatos

:bigimage
[images/contatos_ui.png]

:items+image
# Services
* /Data Services/ são uma boa forma de separar a lógica de obtenção dos dado da apresentação.
* Você cria um serviço com o comando |ionic generate service <nome>|
[images/contatos_service.png]

:twoimages
[images/contatos_page.png]
[images/contatos_page_ts.png]

:bigtitle
# Ônibus POA

:items
# Objetivo
* Consumir a API pública de transportes da cidade de Porto Alegre
* Localização de Paradas
* Linhas de Ônibus
* Paradas das linhas de Ônibus
* Paradas dentro de uma região a partir de coordenadas GPS

:bigtitle
# Isso se o Júnior mantivesse a API funcionando e atualizada...

:twoimages
[images/ionic_webservice.png]
[images/webservice_use.png]

:bigtitle
# Obrigado!

:items
# Links
* Links úteis
* \\url{https:\/\/slides.tchelinux.org}
* \\small{\\url{https:\/\/github.com\/rafasgj\/ionic-crash-course.git}}
* \\url{https:\/\/certificados.tchelinux.org}
